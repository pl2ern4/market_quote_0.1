{"version":3,"sources":["api.js","actions.js","rootReducer.js","quoteForm.js","ResultQuote.js","App.js","index.js"],"names":["headers","content-type","getData","_callee","url","newHeaders","method","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","Promise","resolve","reject","fetch","then","data","ok","json","catch","error","console","log","abrupt","sent","stop","constant","loadFetching","type","loadResult","payload","loadError","submitQuoteAction","dispatch","concat","fromCurrency","toCurrency","amount","submitQuoteApi","result","resultQuote","status","getCurrencyCode","currencies","initialState","phoneList","jsonPhone","rootReducer","combineReducers","store","state","action","Object","objectSpread","isFetching","isError","form","combineForms","user","FirstName","regex","email","phone","firstName","lastName","QuoteForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","name","errorField","isRequired","e","_this$setState","inValid","test","target","value","setState","defineProperty","onSubmit","event","preventDefault","code","isSameCurrency","onSelectCode","amountError","invalidPhone","react_default","createElement","Form","className","Row","Group","as","Col","controlId","Label","Control","required","autoComplete","placeholder","maxLength","isInvalid","firstNameError","onChange","lastNameError","invalidEmail","InputGroup","DropdownButton","Prepend","variant","title","id","map","option","Dropdown","Item","key","onClick","FormControl","aria-describedby","invalidToCurrency","entries","size","Button","Component","ResultQuote","params","quote","Fragment","CustomerRate","Amount","text","currencyCode","fromCurrencyCode","currencyAmount","CustomerAmount","toCurrencyCode","ComparisonAmount","getNewQuote","App","resetState","submitQuote","getCurrency","_this$props","quoteForm_QuoteForm","phoneCode","setSelectedCurrency","reset","toReset","connect","resultRates","loggerMiddleware","createLogger","createStore","applyMiddleware","thunkMiddleware","app","es","src_App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f63d83fe.chunk.js","sourcesContent":["const headers = {\"content-type\":\"application/json;charset=UTF-8\"};\r\n\r\nasync function getData(url,newHeaders=headers, payload={}, method='GET'){\r\n\r\n      const header = {newHeaders,method}\r\n      return await new Promise((resolve,reject)=>{\r\n        fetch(url,newHeaders)\r\n        .then(data=>{\r\n            if(!data.ok){\r\n                return null;\r\n            }\r\n            return data.json();\r\n        })\r\n        .then(data=>resolve(data))\r\n        .catch(function(error) {\r\n            console.log('Looks like there was a problem: \\n', error);\r\n            return null;\r\n        });\r\n      }).then(data=>data)      \r\n}\r\n\r\nexport function submitQuoteApi(payload){\r\n    return getData(`https://api.ofx.com/PublicSite.ApiService/OFX/spotrate/Individual/${payload.fromCurrency}/${payload.toCurrency}/${payload.amount}?format=json`).then(data=>data);\r\n}\r\n\r\nexport function getCurrencyCodeApi(){\r\n    const url = \"https://openexchangerates.org/api/currencies.json\";\r\n    return getData(url);\r\n}\r\n","import { getCurrencyCodeApi,submitQuoteApi } from './api';\r\n\r\nexport const constant = {\r\n    GET_RESULT : 'GET_RESULT',\r\n    SHOW_ERROR: 'SHOW_ERROR',\r\n    SHOW_RESULT : 'SHOW_RESULT',\r\n    QUOTE : 'quote',\r\n    RESULT : 'result',\r\n    RESET_STATE : 'RESET_STATE'\r\n}\r\n\r\nconst loadFetching = () => {\r\n    return {\r\n        type: constant.GET_RESULT,\r\n    }\r\n}\r\n\r\nconst loadResult = payload => {\r\n    return {\r\n        type: constant.SHOW_RESULT,\r\n        payload\r\n    }\r\n}\r\n\r\nconst loadError = (error) => {\r\n    return {\r\n        type: constant.SHOW_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport const resetStateAction = () => {\r\n    return {\r\n        type: constant.RESET_STATE,\r\n    }\r\n}\r\n\r\nexport const submitQuoteAction = payload => {\r\n    loadFetching();\r\n    return dispatch=>{\r\n        submitQuoteApi(payload)\r\n        .then(result=>{\r\n            dispatch(loadResult({resultQuote:result, status:constant.RESULT}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));     \r\n    }\r\n}\r\n\r\nexport const getCurrencyCode = () =>{\r\n    loadFetching();\r\n    return dispatch=>{\r\n        getCurrencyCodeApi()\r\n        .then(result=>{\r\n            dispatch(loadResult({currencies:result}));\r\n        })\r\n        .catch(error=> dispatch(loadError(error)));        \r\n    }\r\n}","import {constant} from './actions';\r\nimport * as jsonPhone from './mockPhoneCode.json';\r\nimport { combineReducers } from 'redux';\r\nimport { combineForms } from 'react-redux-form';\r\n\r\nconst initialState = {\r\n                        phoneList: jsonPhone.code,\r\n                        resultQuote:{}, \r\n                        status:constant.QUOTE, \r\n                        // quoteForm : formReducer\r\n};\r\n\r\nexport const appReducer = (state=initialState, action) => {\r\n    switch(action.type){\r\n        case constant.GET_RESULT:\r\n            return { ...state,\r\n                isFetching:true,\r\n                isError:false\r\n            };\r\n        \r\n        case constant.SHOW_ERROR:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:true\r\n            };\r\n\r\n        case constant.SHOW_RESULT:\r\n            return { ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                ...action.payload||{}  \r\n            };    \r\n        \r\n        case constant.RESET_STATE:\r\n            return {\r\n                ...state,\r\n                isFetching:false,\r\n                isError:false,\r\n                status: constant.QUOTE,\r\n                resultQuote:{}\r\n            };\r\n        default:\r\n            return {...state};\r\n        \r\n    }\r\n}\r\n\r\nconst initialUser = { FirstName: '' };\r\n\r\nexport const rootReducer = combineReducers({\r\n                            store:appReducer,\r\n                            form:combineForms({\r\n                                user: initialUser,\r\n                            })\r\n                        });\r\n","import React,{Component} from 'react';\r\nimport {Form,Button,Col,InputGroup,FormControl,Dropdown,DropdownButton } from 'react-bootstrap';\r\n\r\nconst regex = {\r\n  email:/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/,\r\n  phone:/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/,\r\n  firstName:/^[a-zA-Z]+$/,\r\n  lastName:/^[a-zA-Z]+$/,\r\n  amount:/^[-+]?\\d+(\\.\\d\\d?)?$/\r\n}\r\n\r\nexport default class QuoteForm extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name:'',\r\n      email:'',\r\n      code:'+61',\r\n      fromCurrency:'AUD',\r\n      toCurrency:'USD',\r\n      firstName:'',\r\n      lastName:'',\r\n      phone:'',\r\n      amount:'',\r\n      amountError:'',\r\n      invalidPhone:'',\r\n    }\r\n  }\r\n\r\n  handleChange = (name, errorField,isRequired) => e =>{\r\n    let inValid=true;\r\n    if(regex[name] && regex[name].test(e.target.value)){\r\n      inValid=false;\r\n    }\r\n    if(isRequired === undefined && !e.target.value || !errorField){\r\n      inValid=false;\r\n    }\r\n    this.setState({[name]:e.target.value,[errorField]:inValid,isSameCurrency:false})\r\n  }\r\n\r\n  onSubmit = event =>{\r\n    \r\n    event.preventDefault();\r\n\r\n    if(this.state.fromCurrency===this.state.toCurrency)\r\n    {\r\n      this.setState({\r\n        isSameCurrency:true\r\n      })\r\n      return;\r\n    }\r\n    const payload = {\r\n      name:`${this.state.firstName} ${this.state.lastName}`,\r\n      email:this.state.email,\r\n      phone:`${this.state.code}${this.state.phone}`,\r\n      fromCurrency:this.state.fromCurrency,\r\n      toCurrency:this.state.toCurrency,\r\n      amount:this.state.amount,\r\n    }\r\n    this.props.onSubmit(payload);\r\n  }\r\n\r\n  onSelectCode = event=>{\r\n    this.setState({code:event.code})\r\n  }\r\n\r\n  render(){\r\n    const {props:{\r\n        currencies\r\n      },\r\n      onSubmit,onSelectCode } = this;\r\n\r\n    return (\r\n      <Form  onSubmit={onSubmit}>\r\n        <div className=\"personal-div\">\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGridFirstName\">\r\n              <Form.Label>First Name<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control required type=\"text\" value={this.state.firstName||''} autoComplete=\"off\" placeholder=\"First Name\" maxLength={10} isInvalid={this.state.firstNameError} onChange={this.handleChange('firstName','firstNameError','required')}/>\r\n            </Form.Group>\r\n        \r\n            <Form.Group as={Col} controlId=\"formGridLastName\">\r\n              <Form.Label>Last Name<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control required type=\"text\" value={this.state.lastName||''} autoComplete=\"off\" placeholder=\"Last Name\" maxLength={10} isInvalid={this.state.lastNameError}  onChange={this.handleChange('lastName','lastNameError','required')}/>\r\n            </Form.Group>\r\n          </Form.Row>\r\n    \r\n          <Form.Group controlId=\"formGridEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control type=\"email\" placeholder=\"Enter email\" maxLength={50} autoComplete=\"off\"  isInvalid={this.state.invalidEmail} value={this.state.email||''} onChange={this.handleChange('email','invalidEmail')}/>\r\n          </Form.Group>\r\n      \r\n          <Form.Group controlId=\"formGridPhone\">\r\n          <Form.Label>Telephone / Mobile</Form.Label>\r\n          <InputGroup className=\"mb-3\">\r\n            <DropdownButton\r\n              as={InputGroup.Prepend}\r\n              variant=\"outline-secondary\"\r\n              title={this.state.code}\r\n              id=\"input-group-dropdown-1\"\r\n            >\r\n              {this.props.phoneList.map(option => {\r\n                return (\r\n                  <Dropdown.Item key={option['code']} onClick={e=>onSelectCode({code:option['dial_code'],name:option['name']})}>{option['dial_code']}</Dropdown.Item>\r\n                )\r\n              })}\r\n            </DropdownButton>\r\n            <FormControl autoComplete=\"off\" aria-describedby=\"basic-addon1\" maxLength={10} onChange={this.handleChange('phone','invalidPhone')} value={this.state.value} isInvalid={this.state.invalidPhone}/>\r\n          </InputGroup>\r\n          </Form.Group>\r\n        </div>\r\n        <div className=\"grey-background quote-detail\">\r\n          <Form.Row>\r\n                \r\n            <Form.Group as={Col} controlId=\"fromCurrency\" className=\"currency-input\">\r\n              <Form.Label>From Currency<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control as=\"select\" required isInvalid={this.state.invalidToCurrency} value={this.state.fromCurrency} onChange={this.handleChange('fromCurrency')}>\r\n                {Object.entries(currencies).map(option => (\r\n                  <option key={option['0']} value={option['0']}>{option['1']}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n        \r\n            <Form.Group as={Col} controlId=\"toCurrency\">\r\n              <Form.Label>To Currency<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control as=\"select\" required isInvalid={this.state.invalidToCurrency} autoComplete=\"off\" value={this.state.toCurrency} onChange={this.handleChange('toCurrency')}>\r\n                {Object.entries(currencies).map(option => (\r\n                  <option key={option['0']} value={option['0']}>{option['1']}</option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Group controlId=\"formGridAmount\" className=\"amount-input\">\r\n              <Form.Label>Amount<span className=\"required\">*</span></Form.Label>\r\n              <Form.Control autoComplete=\"off\" required type=\"text\" placeholder=\"Amount\" size={10} value={this.state.amount||''} onChange={this.handleChange('amount','amountError','required')} isInvalid={this.state.amountError}/>\r\n          </Form.Group>\r\n          {this.state.isSameCurrency && <p><span className=\"error\">Conversion currency cannot be same.</span></p>}\r\n          <Button variant=\"primary\" type=\"submit\">\r\n             GET QUOTE\r\n          </Button>\r\n        </div>\r\n    </Form>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport default function ResultQuote(params){\r\n    return (\r\n        <div className=\"grey-background result-quote\">\r\n            {!params.quote &&\r\n                <div className=\"result-Error\">\r\n                    Sorry currency not Supportive\r\n                </div>\r\n            }\r\n            { params.quote &&\r\n                <>\r\n                    <span className=\"ofx-rate-heading\">OFX Customer Rate</span>\r\n                    <p><span className=\"rate\">{params.quote.CustomerRate}</span></p>\r\n                    <div className=\"converted-amount\">\r\n                        <Amount \r\n                            text='From' \r\n                            currencyCode={params.fromCurrencyCode} \r\n                            currencyAmount={params.quote.CustomerAmount}/>\r\n                        <Amount \r\n                            text='To' \r\n                            currencyCode={params.toCurrencyCode} \r\n                            currencyAmount={params.quote.ComparisonAmount}/>\r\n                    </div>\r\n                    </>\r\n            }  \r\n            <Button variant=\"primary\" type=\"button\" onClick={e=>params.getNewQuote()}>\r\n                START NEW QUOTE\r\n            </Button>\r\n                \r\n        </div>\r\n    )\r\n}\r\nfunction Amount(params){\r\n    return(\r\n        <>\r\n            <span className=\"align-side\">{params.text}</span>\r\n            <p>\r\n                <span className=\"currency\">{params.currencyCode}</span>\r\n                <span className=\"amount\">{params.currencyAmount}</span>\r\n            </p>\r\n        </>\r\n    )\r\n}","import React,{ Component } from 'react';\r\nimport QuoteForm from './quoteForm';\r\nimport ResultQuote from './ResultQuote';\r\nimport {connect} from 'react-redux';\r\nimport { getCurrencyCode, submitQuoteAction, resetStateAction, constant } from './actions';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      currencies:[],\r\n      ...this.props.resetState()\r\n    }\r\n  }\r\n\r\n  getNewQuote = () => {\r\n    this.setState({\r\n      ...this.props.resetState()\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n     this.props.getCurrency();  \r\n  }\r\n\r\n  onSubmit=params=>{\r\n    this.props.submitQuote(params)\r\n  }\r\n\r\n  render(){\r\n    const {     phoneList, currencies, quote, status} = this.props;\r\n    return (\r\n      <div className=\"main-div\">\r\n        <span className=\"heading\">Quick Quote</span>\r\n        <hr/>\r\n        {status=== constant.QUOTE && <QuoteForm \r\n          currencies={currencies} \r\n          phoneList={phoneList}\r\n          phoneCode={this.state.phoneCode} \r\n          setSelectedCurrency={this.setSelectedCurrency}\r\n          onSubmit={this.onSubmit}\r\n          reset={this.state.toReset}/>}\r\n        {status=== constant.RESULT && <ResultQuote getNewQuote={this.getNewQuote} quote={quote} fromCurrencyCode={this.state.fromCurrency} toCurrencyCode={this.state.toCurrency}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state,props)=>{\r\n  return {\r\n    quote:state.store.resultQuote,\r\n    resultRates:state.store.resultRates,\r\n    currencies:state.store.currencies || {},\r\n    phoneList: state.store.phoneList || {},\r\n    status: state.store.status\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getCurrency : ()=> dispatch(getCurrencyCode()),\r\n  submitQuote : params=> dispatch(submitQuoteAction(params)),\r\n  resetState : ()=> dispatch(resetStateAction())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { rootReducer } from './rootReducer';\r\nimport './index.css';\r\nimport App from './App';\r\nconst initialUser = { name: '' };\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\n// const store = createStore(combineForms({\r\n//     quoteForm: {},\r\n//   }));\r\n \r\nconst loggerMiddleware = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,loggerMiddleware));\r\nconst app = <Provider store={store}><App /></Provider>\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}